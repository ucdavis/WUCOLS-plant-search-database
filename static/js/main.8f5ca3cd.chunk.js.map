{"version":3,"sources":["Search/Map.tsx","Utilities/useLocalStorage.ts","Search/sort-plants.ts","Plant/PlantTypeBadge.tsx","Plant/WaterDropRating.tsx","Plant/PlantFavoriteButton.tsx","Plant/PlantList.tsx","Plant/PlantDetailQrCode.tsx","Plant/PlantTable.tsx","Plant/plant-type-combinator-options.ts","Search/SearchForm.tsx","Search/Welcome.tsx","Download/DownloadActionList.tsx","Download/plantsAsExcelSheet.tsx","Plant/BenchCardDocument.tsx","Download/DownloadMenu.tsx","Plant/PlantPagination.tsx","Search/Search.tsx","Plant/PlantDetail.tsx","Favorites/Favorites.tsx","Search/search-criteria-converter.ts","App.tsx","Utilities/serviceWorker.ts","index.tsx"],"names":["containerStyle","width","height","CityMarker","city","onClick","markerRef","React","useRef","iw","window","google","maps","InfoWindow","content","name","setNameVisible","v","marker","current","map","open","anchor","shouldFocus","close","position","ref","onMouseOver","onMouseOut","libraries","MyComponent","cities","onSelect","isLoaded","useJsApiLoader","id","googleMapsApiKey","process","useState","setMap","fitPositions","positions","bounds","LatLngBounds","forEach","p","extend","fitBounds","onLoad","useCallback","cityPositions","c","LatLng","visitorMarker","undefined","console","log","length","extraControls","document","createElement","style","marginBottom","display","flexDirection","innerHTML","controls","ControlPosition","BOTTOM_CENTER","push","buttons","getElementsByTagName","addEventListener","navigator","geolocation","getCurrentPosition","pos","currentPosition","lat","coords","latitude","lng","longitude","measurements","cityPosition","distance","geometry","spherical","computeDistanceBetween","sort","a","b","slice","m","setTimeout","Marker","draggable","animation","Animation","DROP","icon","zIndex","addListener","getAnimation","setAnimation","BOUNCE","err","warn","code","message","alert","enableHighAccuracy","timeout","maximumAge","onUnmount","mapContainerStyle","key","memo","useLocalStorage","initialValue","item","localStorage","getItem","JSON","parse","error","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","sortValueByWaterUseCode","VL","LO","M","H","U","NA","getWaterUseSortValue","sortPlants","region","plants","plantA","plantB","waterUseByRegion","PlantTypeBadge","type","plantTypeNameByCode","className","role","WaterDropRating","waterUseCode","DropIcon","filled","opacity","color","padding","faTint","d","D","PlantFavoriteButton","plant","togglePlantFavorite","isPlantFavorite","FavoriteIcon","faStar","dropShadowCss","title","WebkitFilter","filter","PlantList","photosByPlantName","waterUseByCode","imageSize","wu","photoUrl","botanicalName","small","url","top","right","background","backgroundSize","src","alt","percentageET0","to","commonName","types","t","plantDetailQrCodeFromId","destination_url","URL","replace","toString","plantDetailUrlFromId","image_url","encodeURIComponent","PlantDetailQrCode","href","target","rel","PlantTable","queryString","showAvailableMedia","rowSpan","plantFactor","combinators","label","fn","plantTypeCombinatorOptions","default","array","byId","reduce","dict","MapModal","visible","setVisible","onCityChange","tabIndex","left","Map","SearchForm","cityOptions","searchCriteria","plantTypes","waterUseClassifications","updateSearchCriteria","mapModalVisible","setMapModalVisible","selectAllWaterUseClassifications","selected","pageNumber","o","selectAllPlantTypes","pt","everythingElse","placeholder","onChange","e","toLowerCase","checked","htmlFor","styles","container","base","flex","options","plantTypeCombinator","ptc","noOptionsMessage","faMap","Welcome","DownloadActionList","downloadActions","i","method","plantsAsExcelSheet","data","regionNumbers","columns","flatMap","r","join","debug","StyleSheet","create","page","textAlign","backgroundColor","waterUseClassificationBox","logo","logos","section","margin","flexGrow","dropRatingByWaterUseCode","Font","register","family","fontFamily","N","justifyContent","BenchCardDocument","benchCardTemplate","qrCodeUrl","leadPhoto","photos","sizeInches","sizeInInches","sizePoints","x","y","logoStyle","size","fontSize","fontWeight","fontStyle","paddingBottom","alignItems","defaultProps","DownloadMenu","currentBct","setCurrentBct","zipCancelled","showZipModal","setShowZipModal","zipCurrent","setZipCurrent","zipTotal","setZipTotal","useEffect","cb","Promise","all","Error","pdf","toBlob","plantBlobPairs","zip","JSZip","blob","file","generateAsync","then","saveAs","actionList","ExcelFile","ReactExport","ExcelSheet","sideRender","getElementById","ReactDOM","render","include","fetch","faQrcode","benchCardTemplates","bct","faIdCard","excelData","filename","hideElement","dataSet","faFileExcel","da","getDownloadActions","modal","Modal","show","onHide","Header","closeButton","Title","Body","Container","fluid","Row","Col","ProgressBar","now","Math","round","Footer","Button","variant","getPlantPaginationProps","pageSize","itemCount","mostRecentPageNumber","setCurrentPageNumber","min","max","pageCount","ceil","currentPageNumber","getCurrentItems","items","PlantPagination","paginationModel","ultimatePagination","getPaginationModel","currentPage","totalPages","boundaryPagesRange","siblingPagesRange","hideEllipsis","hidePreviousAndNextPageLinks","hideFirstAndLastPageLinks","Pagination","props","active","isActive","Item","Ellipsis","f","Search","searchPerformed","setSearchCriteria","addAllToFavorites","resetSearchCriteria","plantsViewModes","component","faBars","faThLarge","faTh","plantsViewModeId","plantsViewMode","vm","matchingPlants","useMemo","noType","Object","values","every","noWu","entries","k","typeFn","some","bind","typeOk","indexOf","wuOk","nameOk","searchName","plantPaginationProps","pn","actualPagination","PlantDetail","regions","regionWaterUsePairs","webBenchCard","objectFit","whiteSpace","culturalInformation","dangerouslySetInnerHTML","__html","caption","maxWidth","Favorites","favoritePlants","clearAllFavorites","getDefaultSearchCriteria","SearchCriteriaConverter","fromQuerystring","qs","ps","URLSearchParams","parseInt","get","getAll","plantTypeCombinatorId","cityId","toQuerystring","sc","initSearchCriteria","querystring","up","App","location","useLocation","history","useHistory","search","pathname","isFavoriteByPlantId","updateIsFavoriteByPlantId","useToasts","addToast","removeToast","original","assign","amended","fromEntries","thisToastId","appearance","transitionState","autoDismiss","toastId","isFavoriteNow","faSearch","tooltip","activeClassName","exact","path","match","params","plantId","url_keyword","bctId","showToolbar","clearedDict","unclearedDict","Boolean","hostname","json","l","cachedBlobUrl","wucols_data","placement","autoDismissTimeout","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.8f5ca3cd.chunk.js","sourcesContent":["import React from \"react\";\nimport { GoogleMap, useJsApiLoader, Marker } from \"@react-google-maps/api\";\nimport { City } from \"../types\";\n\ndeclare global {\n  interface Window {\n    map: google.maps.Map;\n    extraControls: HTMLDivElement;\n    currentPosition: google.maps.LatLng;\n  }\n}\n\nconst containerStyle = {\n  width: \"100%\",\n  height: \"70vh\",\n};\n\ninterface CityMarkerProps {\n  city: City;\n  onClick: (city: City) => void;\n}\n\nconst CityMarker = ({ city, onClick }: CityMarkerProps) => {\n  const markerRef = React.useRef<Marker | null>(null);\n  let iw = new window.google.maps.InfoWindow({\n    content: `<div>${city.name}</div>`,\n  });\n  const setNameVisible = (v: boolean) => {\n    if (v) {\n      let marker = markerRef.current?.marker as any;\n      let map = marker?.map;\n      iw.open({\n        anchor: marker,\n        map,\n        shouldFocus: false,\n      });\n    } else {\n      iw.close();\n    }\n  };\n  return (\n    <>\n      <Marker\n        position={city.position}\n        ref={(ref) => (markerRef.current = ref)}\n        onClick={() => {\n          onClick(city);\n          iw.close();\n        }}\n        onMouseOver={() => {\n          setNameVisible(true);\n        }}\n        onMouseOut={() => {\n          setNameVisible(false);\n        }}\n      />\n    </>\n  );\n};\n\nconst apiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\nconst libraries: [\"geometry\"] = [\"geometry\"];\n\ninterface MyComponentProps {\n  cities: City[];\n  onSelect: (city: City) => void;\n}\n\nfunction MyComponent({ cities, onSelect }: MyComponentProps) {\n  interface CityMeasurement {\n    city: City;\n    cityPosition: google.maps.LatLng;\n    distance: number;\n  }\n\n  const { isLoaded } = useJsApiLoader({\n    id: \"google-map-script\",\n    libraries,\n    googleMapsApiKey: apiKey,\n  });\n\n  const [, setMap] = React.useState<google.maps.Map | null>(null);\n\n  const fitPositions = (\n    map: google.maps.Map,\n    positions: google.maps.LatLng[]\n  ) => {\n    const bounds = new window.google.maps.LatLngBounds();\n    positions.forEach((p) => {\n      bounds.extend(p);\n    });\n    map.fitBounds(bounds);\n  };\n\n  const onLoad = React.useCallback(\n    function callback(map: google.maps.Map) {\n      const cityPositions = cities.map(\n        (c) => new google.maps.LatLng(c.position)\n      );\n      var visitorMarker: google.maps.Marker | undefined = undefined;\n      fitPositions(map, cityPositions);\n      setMap(map);\n      window.map = map;\n      console.log(`fit bounds to ${cities.length} cities`);\n      const extraControls = window.document.createElement(\"div\");\n      extraControls.style.marginBottom = \"2em\";\n      extraControls.style.display = \"flex\";\n      extraControls.style.flexDirection = \"column\";\n      extraControls.innerHTML = `\n        <button\n          draggable=\"false\" \n          aria-label=\"Use my location\"\n          title=\"Use my location\"\n          type=\"button\"\n          aria-pressed=\"true\"\n          style=\" background: none padding-box rgb(255, 255, 255); display: table-cell; border: 0px; margin: 0px; padding: 0px 17px; text-transform: none; appearance: none; position: relative; cursor: pointer; user-select: none; direction: ltr; overflow: hidden; text-align: center; height: 40px; vertical-align: middle; color: rgb(0, 0, 0); font-family: Roboto, Arial, sans-serif; font-size: 18px; border-bottom-left-radius: 2px; border-top-left-radius: 2px; box-shadow: rgba(0, 0, 0, 0.3) 0px 1px 4px -1px; min-width: 35px; font-weight: 500; margin-bottom:1em;\" aria-expanded=\"false\">\n            Use my location\n          </button>`;\n      extraControls.innerHTML += `\n        <button\n          draggable=\"false\" \n          aria-label=\"View all cities\"\n          title=\"View all cities\"\n          type=\"button\"\n          aria-pressed=\"true\"\n          style=\"background: none padding-box rgb(255, 255, 255); display: table-cell; border: 0px; margin: 0px; padding: 0px 17px; text-transform: none; appearance: none; position: relative; cursor: pointer; user-select: none; direction: ltr; overflow: hidden; text-align: center; height: 40px; vertical-align: middle; color: rgb(0, 0, 0); font-family: Roboto, Arial, sans-serif; font-size: 18px; border-bottom-left-radius: 2px; border-top-left-radius: 2px; box-shadow: rgba(0, 0, 0, 0.3) 0px 1px 4px -1px; min-width: 35px; font-weight: 500;\" aria-expanded=\"false\">\n            View All Cities\n          </button>`;\n      map.controls[window.google.maps.ControlPosition.BOTTOM_CENTER].push(\n        extraControls\n      );\n      window.extraControls = extraControls;\n      let buttons = extraControls.getElementsByTagName(\"button\");\n\n      buttons[1].addEventListener(\"click\", () => {\n        fitPositions(map, cityPositions);\n      });\n\n      buttons[0].addEventListener(\"click\", () => {\n        function success(pos: GeolocationPosition) {\n          let currentPosition = new window.google.maps.LatLng({\n            lat: pos.coords.latitude,\n            lng: pos.coords.longitude,\n          });\n          window.currentPosition = currentPosition;\n          console.log(\"Your current position is:\", currentPosition);\n          var measurements = cities\n            .map((city) => {\n              let cityPosition = new window.google.maps.LatLng(city.position);\n              return {\n                city,\n                cityPosition,\n                distance:\n                  window.google.maps.geometry.spherical.computeDistanceBetween(\n                    currentPosition,\n                    cityPosition\n                  ),\n              } as CityMeasurement;\n            })\n            .sort((a, b) => a.distance - b.distance)\n            .slice(0, 5);\n          fitPositions(\n            map,\n            measurements.map((m) => m.cityPosition)\n          );\n\n          window.setTimeout(() => {\n            if (visitorMarker) {\n              visitorMarker.setMap(null);\n            }\n            visitorMarker = new window.google.maps.Marker({\n              map,\n              draggable: false,\n              animation: window.google.maps.Animation.DROP,\n              icon: \"http://maps.google.com/mapfiles/kml/shapes/man.png\", //'http://earth.google.com/images/kml-icons/track-directional/track-0.png'\n              zIndex: 0,\n              position: currentPosition,\n            });\n            visitorMarker.addListener(\"click\", function toggleBounce() {\n              if (!!visitorMarker) {\n                if (visitorMarker.getAnimation() !== null) {\n                  visitorMarker.setAnimation(null);\n                } else {\n                  visitorMarker.setAnimation(\n                    window.google.maps.Animation.BOUNCE\n                  );\n                }\n              }\n            });\n          }, 1000);\n\n          console.log(measurements);\n        }\n\n        function error(err: GeolocationPositionError) {\n          console.warn(`ERROR(${err.code}): ${err.message}`);\n          alert(\n            err.code === 3\n              ? `Unable to get your location in a reasonable amount of time`\n              : \"Unable to get your location\"\n          );\n        }\n\n        window.navigator.geolocation.getCurrentPosition(success, error, {\n          //for best performance: https://stackoverflow.com/questions/3752383/geolocation-is-so-slow-what-im-doing-wrong\n          enableHighAccuracy: false,\n          timeout: 5000,\n          maximumAge: 1000 * 60,\n        });\n      });\n    },\n    [cities]\n  );\n\n  const onUnmount = React.useCallback(function callback(map) {\n    setMap(null);\n  }, []);\n\n  return isLoaded ? (\n    <GoogleMap\n      mapContainerStyle={containerStyle}\n      onLoad={onLoad}\n      onUnmount={onUnmount}\n    >\n      {/* Child components, such as markers, info windows, etc. */}\n      {cities.map((c) => (\n        <CityMarker key={c.id} city={c} onClick={onSelect} />\n      ))}\n    </GoogleMap>\n  ) : (\n    <></>\n  );\n}\n\nexport default React.memo(MyComponent);\n","import React from \"react\";\n\nfunction useLocalStorage<T>(\n  key: string,\n  initialValue: T\n): [T, (value: T) => void] {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = React.useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? (JSON.parse(item) as T) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value: T) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\nexport default useLocalStorage;\n","import { Plant, WaterUseCode } from \"../types\";\n\nconst sortValueByWaterUseCode: {\n  [key in WaterUseCode]: number;\n} = {\n  VL: 1,\n  LO: 2,\n  M: 3,\n  H: 4,\n  U: 5,\n  NA: 7,\n};\n\nconst getWaterUseSortValue = (code: WaterUseCode) => {\n  return sortValueByWaterUseCode[code] || 99;\n};\n\nconst sortPlants = (region: number) => (plants: Plant[]) =>\n  plants.sort((plantA: Plant, plantB: Plant) => {\n    let a = getWaterUseSortValue(plantA.waterUseByRegion[region - 1]);\n    let b = getWaterUseSortValue(plantB.waterUseByRegion[region - 1]);\n    return a < b ? -1 : a > b ? 1 : 0;\n  });\n\nexport default sortPlants;\n","import React from \"react\";\n\nimport { TypeCode } from \"../types\";\n\ninterface Props {\n  type: TypeCode;\n  plantTypeNameByCode: { [key: string]: string };\n}\n\nconst PlantTypeBadge = ({ type, plantTypeNameByCode }: Props) => (\n  <span>\n    <span className=\"badge badge-plantType\">\n      {/*\n      🌻💮🌺✽✾✿🎕\n      🌼🌸🌹❁❃❋🌴𐇲\n      🌷❀⚘𐇵🍀☘🌱🍁\n      */}\n      {type === \"A\" && (\n        <span role=\"img\" aria-label=\"flower\">\n          🌸{\" \"}\n        </span>\n      )}\n      {plantTypeNameByCode[type]}\n    </span>{\" \"}\n  </span>\n);\n\nexport default PlantTypeBadge;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTint } from \"@fortawesome/free-solid-svg-icons\";\nimport { WaterUseCode } from \"../types\";\n\ninterface Props {\n  waterUseCode: WaterUseCode;\n}\n\nconst WaterDropRating = ({ waterUseCode }: Props) => {\n  interface DropProps {\n    filled?: boolean;\n  }\n\n  const DropIcon = ({ filled }: DropProps) => (\n    <span\n      style={{\n        opacity: filled ? 1 : 0.3,\n        color: filled ? \"#007bff\" : \"grey\",\n        padding: \"0 2px\",\n      }}\n    >\n      <FontAwesomeIcon icon={faTint} />\n    </span>\n  );\n\n  let d = <DropIcon />;\n  let D = <DropIcon filled={true} />;\n  //let d = <span role=\"img\" aria-label=\"empty-water-drop\" style={{opacity:0.3}}>💧</span>;\n  //let D = <span role=\"img\" aria-label=\"full-water-drop\">💧</span>;\n  switch (waterUseCode) {\n    case \"VL\":\n      return (\n        <>\n          {D}\n          {d}\n          {d}\n          {d}\n        </>\n      );\n    case \"LO\":\n      return (\n        <>\n          {D}\n          {D}\n          {d}\n          {d}\n        </>\n      );\n    case \"M\":\n      return (\n        <>\n          {D}\n          {D}\n          {D}\n          {d}\n        </>\n      );\n    case \"H\":\n      return (\n        <>\n          {D}\n          {D}\n          {D}\n          {D}\n        </>\n      );\n    case \"U\":\n      return (\n        <>\n          {d}\n          {d}\n          {d}\n          {d}\n        </>\n      );\n\n    default:\n      return <>N/A</>;\n  }\n};\n\nexport default WaterDropRating;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faStar } from \"@fortawesome/free-solid-svg-icons\";\nimport { Plant } from \"../types\";\n\ninterface Props {\n  plant: Plant;\n  togglePlantFavorite: (plant: Plant) => void;\n  isPlantFavorite: (plant: Plant) => boolean;\n}\n\nconst PlantFavoriteButton = ({\n  plant,\n  togglePlantFavorite,\n  isPlantFavorite,\n}: Props) => {\n  const FavoriteIcon = () => <FontAwesomeIcon icon={faStar} />;\n  const dropShadowCss = \"drop-shadow( 0px 1px 1px rgba(0, 0, 0, .3))\";\n  return (\n    <button\n      title={\n        isPlantFavorite(plant)\n          ? \"This plant is in your favorites.  Click to remove it.\"\n          : \"Click to add this plant to your favorites.\"\n      }\n      className={\n        \"btn \" + (isPlantFavorite(plant) ? \" btn-warning\" : \"btn-light\")\n      }\n      onClick={() => togglePlantFavorite(plant)}\n    >\n      {isPlantFavorite(plant) ? (\n        <span\n          style={{\n            color: \"hsl(60deg 100% 45%)\",\n            WebkitFilter: dropShadowCss,\n            filter: dropShadowCss,\n          }}\n        >\n          <FavoriteIcon />\n        </span>\n      ) : (\n        <span>\n          <FavoriteIcon />\n        </span>\n      )}\n    </button>\n  );\n};\n\nexport default PlantFavoriteButton;\n","import React from \"react\";\nimport PlantTypeBadge from \"./PlantTypeBadge\";\nimport WaterDropRating from \"./WaterDropRating\";\nimport PlantFavoriteButton from \"./PlantFavoriteButton\";\nimport { Link } from \"react-router-dom\";\nimport { Photo, Plant, WaterUseClassification } from \"../types\";\n\ninterface Props {\n  className: string;\n  plants: Plant[];\n  photosByPlantName: { [key: string]: Photo };\n  plantTypeNameByCode: { [key: string]: string };\n  waterUseByCode: { [key: string]: WaterUseClassification };\n  region: number;\n  isPlantFavorite: (plant: Plant) => boolean;\n  togglePlantFavorite: (plant: Plant) => void;\n}\n\nconst PlantList = ({\n  className,\n  plants,\n  photosByPlantName,\n  plantTypeNameByCode,\n  waterUseByCode,\n  region,\n  isPlantFavorite,\n  togglePlantFavorite,\n}: Props) => {\n  return (\n    <div className=\"row no-gutters\">\n      {plants.map((p) => {\n        const imageSize = \"150px\";\n        let wu = waterUseByCode[p.waterUseByRegion[region - 1]];\n        let photoUrl = !photosByPlantName[p.botanicalName]\n          ? \"https://via.placeholder.com/200\"\n          : photosByPlantName[p.botanicalName].small.url;\n        return (\n          <div className={className} key={p.id}>\n            <div className=\"card mr-2 mb-2\">\n              <div className=\"d-flex\">\n                <div className=\"d-flex-shrink-0\">\n                  <div style={{ position: \"relative\" }}>\n                    <div\n                      style={{\n                        position: \"absolute\",\n                        top: \"10px\",\n                        right: \"10px\",\n                        color: \"unset\",\n                      }}\n                    >\n                      <PlantFavoriteButton\n                        {...{ plant: p, togglePlantFavorite, isPlantFavorite }}\n                      />\n                    </div>\n                    <img\n                      className=\"card-img\"\n                      style={{\n                        width: imageSize,\n                        height: imageSize,\n                        background: `url(${photoUrl})`,\n                        backgroundSize: \"cover\",\n                      }}\n                      src={photoUrl}\n                      alt={p.botanicalName}\n                    />\n                  </div>\n                </div>\n                <div className=\"d-flex-grow-1 ml-3 flex-fill\">\n                  <div className=\"card-body\">\n                    <div className=\"float-right text-right ml-3\">\n                      <WaterDropRating waterUseCode={wu.code} />\n                      <br />\n                      <small>{wu.name}</small>\n                      <br />\n                      <small>\n                        {wu.percentageET0}% ET<sub>0</sub>\n                      </small>\n\n                      {/*\n                      <div>\n                        <input type=\"checkbox\" checked={isPlantFavorite(p)} onChange={() => togglePlantFavorite(p)}/>\n                      </div>\n                      */}\n                    </div>\n                    <Link to={`/plant/${p.id}`}>\n                      <h6 className=\"mt-0 mb-1\">\n                        <em>{p.botanicalName}</em>\n                      </h6>\n                    </Link>\n                    <div>{p.commonName}</div>\n                    <div>\n                      {p.types.map((t) => (\n                        <PlantTypeBadge\n                          plantTypeNameByCode={plantTypeNameByCode}\n                          type={t}\n                          key={t}\n                        />\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default PlantList;\n","import React from \"react\";\nimport { Plant } from \"../types\";\n\nconst googleQrCodeUrl = (destination_url: string) =>\n  `https://chart.googleapis.com/chart?chs=500x500&cht=qr&choe=UTF-8&chl=${encodeURIComponent(\n    destination_url\n  )}`;\n\nconst plantDetailUrlFromId = (id: number) =>\n  /* example expected patterns:\n    - https://some.website-of-yours.app/plants/:id/detail \n    - https://some.website-of-yours.app/plants?id=:id&utm_source=qr_code\n  */\n  (process.env.REACT_APP_PLANT_DETAIL_URL_PATTERN || \"\") !== \"\"\n    ? new URL(\n        process.env.REACT_APP_PLANT_DETAIL_URL_PATTERN.replace(\n          \":id\",\n          id.toString()\n        )\n      ).toString()\n    : \"\";\n\nexport const plantDetailQrCodeFromId = (id: number) => {\n  let url = plantDetailUrlFromId(id);\n  return {\n    destination_url: url,\n    image_url: googleQrCodeUrl(url),\n  };\n};\n\ninterface Props {\n  plant: Plant;\n  style?: React.CSSProperties;\n}\n\nexport const PlantDetailQrCode = ({ plant, style }: Props) => {\n  let { destination_url, image_url } = plantDetailQrCodeFromId(plant.id);\n  return (\n    <a href={destination_url} target=\"_blank\" rel=\"noreferrer\">\n      <img\n        src={image_url}\n        alt={\"QR Code for \" + plant.botanicalName}\n        className=\"img-responsive\"\n        style={{ width: \"64px\", ...(style || {}) }}\n      />\n    </a>\n  );\n};\n","import React from \"react\";\nimport PlantTypeBadge from \"./PlantTypeBadge\";\nimport WaterDropRating from \"./WaterDropRating\";\nimport PlantFavoriteButton from \"./PlantFavoriteButton\";\nimport { PlantDetailQrCode } from \"./PlantDetailQrCode\";\nimport { Link } from \"react-router-dom\";\nimport { Photo, Plant, WaterUseClassification } from \"../types\";\n\ninterface Props {\n  queryString: string;\n  showAvailableMedia: boolean;\n  plants: Plant[];\n  photosByPlantName: { [key: string]: Photo };\n  plantTypeNameByCode: { [key: string]: string };\n  waterUseByCode: { [key: string]: WaterUseClassification };\n  region: number;\n  isPlantFavorite: (plant: Plant) => boolean;\n  togglePlantFavorite: (plant: Plant) => void;\n}\n\nconst PlantTable = ({\n  queryString,\n  showAvailableMedia,\n  plants,\n  photosByPlantName,\n  plantTypeNameByCode,\n  waterUseByCode,\n  region,\n  isPlantFavorite,\n  togglePlantFavorite,\n}: Props) => {\n  return (\n    <table className=\"table table-sm \">\n      <thead>\n        <tr>\n          <th rowSpan={2}>Photo</th>\n          <th rowSpan={2}>Name</th>\n          {showAvailableMedia && (\n            <>\n              <th rowSpan={2}>QR Code</th>\n            </>\n          )}\n          <th rowSpan={2}>Water Use</th>\n          <th rowSpan={2}>Type(s)</th>\n          <th rowSpan={2}>Favorite</th>\n        </tr>\n      </thead>\n      <tbody>\n        {plants.map((p) => {\n          const imageSize = \"64px\";\n          let wu = waterUseByCode[p.waterUseByRegion[region - 1]];\n          let photoUrl = !photosByPlantName[p.botanicalName]\n            ? \"https://via.placeholder.com/200\"\n            : photosByPlantName[p.botanicalName].small.url;\n          return (\n            <tr key={p.id}>\n              <td style={{ width: imageSize }}>\n                <img\n                  className=\"card-img mr-2\"\n                  style={{\n                    width: imageSize,\n                    height: imageSize,\n                    background: `url(${photoUrl})`,\n                    backgroundSize: \"cover\",\n                  }}\n                  src={photoUrl}\n                  alt={p.botanicalName}\n                />\n              </td>\n              <td>\n                <Link to={`/plant/${p.id}${queryString}`}>\n                  <h6 className=\"mt-0 mb-1\">\n                    <em>{p.botanicalName}</em>\n                  </h6>\n                </Link>\n                <div>{p.commonName}</div>\n              </td>\n              {showAvailableMedia && (\n                <td>\n                  <PlantDetailQrCode plant={p} />\n                </td>\n              )}\n              <td>\n                <WaterDropRating waterUseCode={wu.code} />\n                <small className=\"ml-2\">{wu.name}</small>\n                <br />\n                <small>\n                  {wu.percentageET0}% ET<sub>0</sub>\n                  <br />\n                  Plant Factor: {wu.plantFactor}\n                </small>\n              </td>\n              <td>\n                {p.types.map((t) => (\n                  <PlantTypeBadge\n                    plantTypeNameByCode={plantTypeNameByCode}\n                    type={t}\n                    key={t}\n                  />\n                ))}\n              </td>\n              <td>\n                <PlantFavoriteButton\n                  {...{ plant: p, togglePlantFavorite, isPlantFavorite }}\n                />\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default PlantTable;\n","import { PlantTypeCombinator, PlantTypeCombinatorOptions } from \"../types\";\n\nconst combinators: PlantTypeCombinator[] = [\n  {\n    label: \"Match plants with ANY of\",\n    value: \"ANY\",\n    fn: (a: any, b: any) => a || b,\n  },\n  {\n    label: \"Match plants with ALL of\",\n    value: \"ALL\",\n    fn: (a: any, b: any) => a && b,\n  },\n];\n\nconst plantTypeCombinatorOptions: PlantTypeCombinatorOptions = {\n  default: combinators[0],\n  array: combinators,\n  byId: combinators.reduce(\n    (dict: { [key: string]: PlantTypeCombinator }, c) => {\n      dict[c.value] = c;\n      return dict;\n    },\n    {}\n  ),\n};\n\nexport default plantTypeCombinatorOptions;\n","import React from \"react\";\nimport Select, { ActionMeta, ValueType } from \"react-select\";\nimport Map from \"./Map\";\nimport plantTypeCombinatorOptions from \"../Plant/plant-type-combinator-options\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMap } from \"@fortawesome/free-solid-svg-icons\";\nimport {\n  BoolDict,\n  City,\n  PlantType,\n  PlantTypeCombinator,\n  SearchCriteria,\n  WaterUseClassification,\n} from \"../types\";\n\ninterface MapModalProps {\n  cities: City[];\n  visible: boolean;\n  setVisible: React.Dispatch<React.SetStateAction<boolean>>;\n  onCityChange: (city: City) => void;\n}\n\nconst MapModal = ({\n  cities,\n  visible,\n  setVisible,\n  onCityChange,\n}: MapModalProps) => (\n  <>\n    {visible && (\n      <div\n        className={\"modal fade\" + (visible ? \" show\" : \"\")}\n        style={{ display: visible ? \"block\" : \"none\" }}\n        id=\"mapModal\"\n        tabIndex={-1}\n        aria-labelledby=\"exampleModalLabel\"\n        aria-hidden=\"true\"\n      >\n        <div className=\"modal-dialog\" style={{ top: \"30px\" }}>\n          <div\n            className=\"modal-content\"\n            style={{ width: \"65vw\", position: \"fixed\", left: \"17vw\" }}\n          >\n            <div className=\"modal-header\">\n              <h5 className=\"modal-title\" id=\"exampleModalLabel\">\n                City Map\n              </h5>\n              <button\n                type=\"button\"\n                className=\"close\"\n                data-dismiss=\"modal\"\n                aria-label=\"Close\"\n                onClick={() => setVisible(false)}\n              >\n                <span aria-hidden=\"true\">&times;</span>\n              </button>\n            </div>\n            <div className=\"modal-body\">\n              <Map\n                cities={cities}\n                onSelect={(city: City) => {\n                  onCityChange(city);\n                  setVisible(false);\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    )}\n  </>\n);\n\ninterface SearchFormProps {\n  cityOptions: City[];\n  searchCriteria: SearchCriteria;\n  plantTypes: PlantType[];\n  waterUseClassifications: WaterUseClassification[];\n  updateSearchCriteria: (searchCriteria: SearchCriteria) => void;\n}\n\nconst SearchForm = ({\n  cityOptions,\n  searchCriteria,\n  plantTypes,\n  waterUseClassifications,\n  updateSearchCriteria,\n}: SearchFormProps) => {\n  const [mapModalVisible, setMapModalVisible] = React.useState(false);\n  const setPlantType = (code: string, checked: boolean) =>\n    updateSearchCriteria({\n      ...searchCriteria,\n      pageNumber: 1,\n      plantTypes: { ...searchCriteria.plantTypes, [code]: checked },\n    });\n  const selectAllWaterUseClassifications = (selected: boolean) => {\n    updateSearchCriteria({\n      ...searchCriteria,\n      pageNumber: 1,\n      waterUseClassifications: waterUseClassifications.reduce(\n        (dict: BoolDict, wu) => {\n          dict[wu.code] = selected;\n          return dict;\n        },\n        {}\n      ),\n    });\n  };\n  const onCityChange = (o: City) => {\n    //console.log('onCityChange',o);\n    updateSearchCriteria({ ...searchCriteria, pageNumber: 1, city: o });\n  };\n  const onPlantTypeCombinatorChange = (ptc: PlantTypeCombinator) => {\n    updateSearchCriteria({\n      ...searchCriteria,\n      pageNumber: 1,\n      plantTypeCombinator: ptc,\n    });\n  };\n  const selectAllPlantTypes = (selected: boolean) => {\n    updateSearchCriteria({\n      ...searchCriteria,\n      pageNumber: 1,\n      plantTypes: plantTypes.reduce((dict: BoolDict, pt) => {\n        dict[pt.code] = selected;\n        return dict;\n      }, {}),\n    });\n  };\n  const everythingElse = (\n    <>\n      <div className=\"form-group\">\n        <label>\n          <strong>Plant Name</strong>\n        </label>\n        <input\n          type=\"search\"\n          className=\"form-control\"\n          value={searchCriteria.name}\n          placeholder=\"botanical or common name\"\n          onChange={(e) =>\n            updateSearchCriteria({\n              ...searchCriteria,\n              pageNumber: 1,\n              name: e.target.value.toLowerCase(),\n            })\n          }\n        />\n      </div>\n      <div className=\"form-group\">\n        <label className=\"form-label\">\n          <strong>Water Use</strong>\n        </label>\n        <div>\n          <button\n            className=\"btn btn-sm btn-link\"\n            onClick={() => selectAllWaterUseClassifications(true)}\n          >\n            Select all\n          </button>\n          /{\" \"}\n          <button\n            className=\"btn btn-sm btn-link\"\n            onClick={() => selectAllWaterUseClassifications(false)}\n          >\n            Deselect all\n          </button>\n        </div>\n        {waterUseClassifications.map((wu) => (\n          <div className=\"form-check\" key={wu.code}>\n            <input\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              checked={searchCriteria.waterUseClassifications[wu.code]}\n              onChange={(e) =>\n                updateSearchCriteria({\n                  ...searchCriteria,\n                  pageNumber: 1,\n                  waterUseClassifications: {\n                    ...searchCriteria.waterUseClassifications,\n                    [wu.code]: e.target.checked,\n                  },\n                })\n              }\n              id={wu.code + \"_checkbox\"}\n            />\n            <label className=\"form-check-label\" htmlFor={wu.code + \"_checkbox\"}>\n              {wu.name}\n            </label>\n          </div>\n        ))}\n      </div>\n      <div className=\"form-group\">\n        <label className=\"form-label\">\n          <strong>Plant Types</strong>\n        </label>\n        <div>\n          <button\n            className=\"btn btn-sm btn-link\"\n            onClick={() => selectAllPlantTypes(true)}\n          >\n            Select all\n          </button>\n          /\n          <button\n            className=\"btn btn-sm btn-link\"\n            onClick={() => selectAllPlantTypes(false)}\n          >\n            Deselect all\n          </button>\n        </div>\n        <div>\n          <Select\n            styles={{\n              container: (base: any) => ({\n                ...base,\n                flex: 1,\n              }),\n            }}\n            options={plantTypeCombinatorOptions.array}\n            value={searchCriteria.plantTypeCombinator}\n            onChange={\n              onPlantTypeCombinatorChange as (\n                o: ValueType<PlantTypeCombinator, false>,\n                _: ActionMeta<PlantTypeCombinator>\n              ) => void\n            }\n            noOptionsMessage={() => \"No result\"}\n          />\n        </div>\n        {plantTypes.map((pt) => (\n          <div className=\"form-check\" key={pt.code}>\n            <input\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              checked={searchCriteria.plantTypes[pt.code] || false}\n              onChange={(e) => setPlantType(pt.code, e.target.checked)}\n              id={pt.code + \"_checkbox\"}\n            />\n            <label className=\"form-check-label\" htmlFor={pt.code + \"_checkbox\"}>\n              {pt.name}\n            </label>\n          </div>\n        ))}\n      </div>\n    </>\n  );\n\n  return (\n    <div>\n      <MapModal\n        visible={mapModalVisible}\n        setVisible={setMapModalVisible}\n        onCityChange={onCityChange}\n        cities={cityOptions}\n      />\n      <div className=\"form-group\">\n        <label>\n          <strong>City/Region</strong>\n          <br />\n          Start typing to search\n        </label>\n        <Select\n          styles={{\n            container: (base: any) => ({\n              ...base,\n              flex: 1,\n            }),\n          }}\n          options={cityOptions}\n          placeholder=\"Select a city\"\n          value={searchCriteria.city}\n          onChange={\n            onCityChange as (\n              o: ValueType<City, false>,\n              _: ActionMeta<City>\n            ) => void\n          }\n          noOptionsMessage={() => \"No cities found by that name\"}\n        />\n        {\" or \"}\n        <button\n          className=\"btn btn-link btn-sm\"\n          onClick={() => setMapModalVisible(true)}\n        >\n          <FontAwesomeIcon icon={faMap} /> Select a city from the map\n        </button>\n      </div>\n      {!!searchCriteria.city ? everythingElse : <></>}\n    </div>\n  );\n};\n\nexport default SearchForm;\n","import React from \"react\";\n\nconst Welcome = () => (\n  <div className=\"welcome-wrapper\">\n    <h1>Welcome to WUCOLS</h1>\n    <p className=\"lead\">\n      WUCOLS{\" \"}\n      <span className=\"discreet\">\n        Water Use Classification of Landscape Species\n      </span>{\" \"}\n      <br />\n      helps you create a landscape plan based on plant water use within your\n      city/region.\n    </p>\n    <h2>Instructions:</h2>\n    <hr />\n    <ol className=\"instructionlist\">\n      <li>\n        <p>\n          <b>Select a City/Region</b> <br />\n          This will determine the appropriate water use rating for each plant.\n        </p>\n      </li>\n      <li>\n        <p>\n          <b>Search a Plant</b> <br />\n          Enter any combination of \"Plant Name, Water Use, Plant Types\" to find\n          plants of interest\n        </p>\n      </li>\n      <li>\n        <p>\n          <b>Favorite</b> <br />\n          Assemble a list of your plants that meet your needs.\n        </p>\n      </li>\n      <li>\n        <p>\n          <b>Download</b> <br />\n          Download your list in a variety of formats\n        </p>\n      </li>\n    </ol>\n  </div>\n);\n\nexport default Welcome;\n","import React from \"react\";\nimport { DownloadAction } from \"../types\";\n\ninterface Props {\n\tdownloadActions: DownloadAction[];\n}\n\nconst DownloadActionList = ({downloadActions}: Props) => \n\tdownloadActions.length === 0 \n\t? <></> \n\t: <div className=\"mb-3 d-flex flex-column justify-content-around\">\n\t\t<div className=\"mb-3\">\n\t\t\t{downloadActions.map((a,i) => (\n\t\t\t\t<div className=\"my-2\" key={i}>\n\t\t\t\t\t\t<button className=\"btn btn-primary btn-block\" onClick={a.method}>\n\t\t\t\t\t\t\t{a.label}\n\t\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t))}\n\t\t</div>\n\t\t<p>\n\t\t\tQR Codes and Bench Cards can be downloaded individually\n\t\t\tfor each plant from that plant&apos;s detail screen.\n\t\t</p>\n\t</div>;\n\nexport default DownloadActionList;","import { ExcelCellData, ExcelSheetData } from \"react-export-excel\";\nimport {\n  Data,\n  Plant\n} from \"../types\";\n\nconst plantsAsExcelSheet = (\n\tdata: Data,\n\tplants: Plant[],\n\tregionNumbers: number[]\n): ExcelSheetData[] => \n[\n\t{\n\t\tcolumns: [\n\t\t\t\"Type(s)\",\n\t\t\t\"Botanical Name\",\n\t\t\t\"Common Name\",\n\t\t\t...regionNumbers.flatMap(r => \n\t\t\t\t[\n\t\t\t\t\t`Region ${r} Water Use`,\n\t\t\t\t\t`Region ${r} ET0`,\n\t\t\t\t\t`Region ${r} Plant Factor`\n\t\t\t\t])\n\t\t],\n\t\tdata: plants.map(\n\t\t\t(p) =>\n\t\t\t\t[\n\t\t\t\t\tp.types.map((t) => data.plantTypeNameByCode[t]).join(\", \"),\n\t\t\t\t\tp.botanicalName,\n\t\t\t\t\tp.commonName,\n\t\t\t\t\t...regionNumbers.flatMap(r => \n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tdata.waterUseByCode[p.waterUseByRegion[r-1]].name,\n\t\t\t\t\t\t\tdata.waterUseByCode[p.waterUseByRegion[r-1]].percentageET0 + \"%\",\n\t\t\t\t\t\t\tdata.waterUseByCode[p.waterUseByRegion[r-1]].plantFactor,\n\t\t\t\t\t\t])\n\t\t\t\t] as ExcelCellData[]\n\t\t),\n\t} as ExcelSheetData\n];\n\nexport default plantsAsExcelSheet;","import React from \"react\";\nimport {\n  Document,\n  Page,\n  Text,\n  View,\n  StyleSheet,\n  Font,\n  Image,\n} from \"@react-pdf/renderer\";\nimport { plantDetailQrCodeFromId } from \"./PlantDetailQrCode\";\nimport {\n  BenchCardTemplate,\n  Plant,\n  WaterUseClassification,\n  WaterUseCode,\n} from \"../types\";\n\nconst debug = false;\n\n// Create styles\nconst styles = StyleSheet.create({\n  page: {\n    textAlign: \"center\",\n    backgroundColor: \"white\",\n  },\n  waterUseClassificationBox: {\n    backgroundColor: \"#304971\",\n    padding: \"8pt\",\n    width: \"44%\",\n    textAlign: \"center\",\n  },\n  logo: {},\n  logos: {},\n  section: {\n    margin: 10,\n    padding: 10,\n    flexGrow: 1,\n  },\n});\n\nconst dropRatingByWaterUseCode: { [key: string]: JSX.Element } = (() => {\n  Font.register({\n    family: \"FontAwesome\",\n    src: \"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.2.0/fonts/fontawesome-webfont.ttf\",\n  });\n  const DropIcon = ({ filled }: { filled?: boolean }) => (\n    <Text\n      style={{\n        opacity: filled ? 1 : 0.3,\n        color: filled ? \"#007bff\" : \"grey\",\n        fontFamily: \"FontAwesome\",\n      }}\n    >\n      \n    </Text>\n  );\n\n  /*\n    <Image src=\"/water-drop.svg\" style={{opacity:filled ? 1 : 0.4}} />;\n*/\n\n  let d = <DropIcon />;\n  let D = <DropIcon filled={true} />;\n  //let d = <span role=\"img\" aria-label=\"empty-water-drop\" style={{opacity:0.3}}>💧</span>;\n  //let D = <span role=\"img\" aria-label=\"full-water-drop\">💧</span>;\n  return {\n    \"?\": (\n      <>\n        {d}\n        {d}\n        {d}\n        {d}\n      </>\n    ),\n    N: (\n      <>\n        {d}\n        {d}\n        {d}\n        {d}\n      </>\n    ),\n    VL: (\n      <>\n        {D}\n        {d}\n        {d}\n        {d}\n      </>\n    ),\n    LO: (\n      <>\n        {D}\n        {D}\n        {d}\n        {d}\n      </>\n    ),\n    M: (\n      <>\n        {D}\n        {D}\n        {D}\n        {d}\n      </>\n    ),\n    H: (\n      <>\n        {D}\n        {D}\n        {D}\n        {D}\n      </>\n    ),\n  };\n})();\n\ninterface WaterDropRatingProps {\n  waterUseCode: WaterUseCode;\n}\n\nconst WaterDropRating = ({ waterUseCode }: WaterDropRatingProps) =>\n  (\n    <View\n      style={{\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"space-evenly\",\n        margin: \"0 25%\",\n      }}\n    >\n      {dropRatingByWaterUseCode[waterUseCode]}\n    </View>\n  ) || <>N/A</>;\n\ninterface BenchCardDocumentProps {\n  plant: Plant;\n  region: number;\n  waterUseByCode: { [key: string]: WaterUseClassification };\n  benchCardTemplate: BenchCardTemplate;\n}\n\nconst BenchCardDocument = ({\n  plant,\n  region,\n  waterUseByCode,\n  benchCardTemplate,\n}: BenchCardDocumentProps) => {\n  const p = plant;\n  const qrCodeUrl = plantDetailQrCodeFromId(plant.id).image_url;\n  let wuCode = p.waterUseByRegion[region - 1];\n  let wu = waterUseByCode[wuCode];\n  //console.log(region, wuCode, wu) //console.log(p)\n  let leadPhoto = p.photos[0];\n  let photoUrl = (!leadPhoto ? \"\" : leadPhoto.small.url).replace(\n    \"wucolsplants.sf.ucdavis.edu\",\n    \"wucols-proxy.azurewebsites.net/api/wucols-proxy\"\n  );\n  //console.log({ leadPhoto, photoUrl });\n  const sizeInches = benchCardTemplate.sizeInInches;\n  const sizePoints = { x: sizeInches.x * 72, y: sizeInches.y * 72 };\n  const logoStyle = { height: `${sizeInches.y / 5}in`, width: \"auto\" };\n\n  return (\n    <Document>\n      <Page size={[sizePoints.x, sizePoints.y]} style={styles.page}>\n        <View\n          debug={debug}\n          style={{\n            display: \"flex\",\n            height: \"100%\",\n            padding: \"18pt\",\n            flexDirection: \"column\",\n            justifyContent: \"space-evenly\",\n          }}\n        >\n          <View>\n            <Text\n              debug={debug}\n              style={{ fontSize: `${0.5}in`, fontWeight: \"extrabold\" }}\n            >\n              {plant.botanicalName}\n            </Text>\n            <Text\n              debug={debug}\n              style={{\n                fontSize: \"25pt\",\n                fontWeight: \"normal\",\n                fontStyle: \"italic\",\n                padding: \"20pt\",\n              }}\n            >\n              {plant.commonName}\n            </Text>\n          </View>\n\n          <View\n            debug={debug}\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              padding: `${sizeInches.x / 11 / 8}in`,\n              justifyContent: \"space-around\",\n            }}\n          >\n            {!!photoUrl && (\n              <Image debug={debug} src={photoUrl} style={{ width: \"45%\" }} />\n            )}\n\n            <View\n              debug={debug}\n              style={[\n                styles.waterUseClassificationBox,\n                {\n                  fontSize: `${sizeInches.x / 11 / 4}in`,\n                },\n              ]}\n            >\n              <Text\n                style={{\n                  color: \"white\",\n                  paddingBottom: `${sizeInches.x / 11 / 8}in`,\n                }}\n              >\n                Water Use Classification\n              </Text>\n              <View\n                style={{\n                  backgroundColor: \"white\",\n                  flexGrow: 1,\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  justifyContent: \"space-evenly\",\n                }}\n              >\n                <Text>{wu.name}</Text>\n                <View style={{ fontSize: `${sizeInches.x / 11 / 2}in` }}>\n                  <WaterDropRating waterUseCode={wu.code} />\n                </View>\n                <View>\n                  <Text>Central Valley</Text>\n                  <Text>(WUCOLS Region 2)</Text>\n                </View>\n                <Text>(Source: WUCOLS IV)</Text>\n              </View>\n            </View>\n          </View>\n          <View\n            debug={debug}\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              justifyContent: \"space-evenly\",\n              alignItems: \"center\",\n              padding: \"2em\",\n              margin: \"5em\",\n            }}\n          >\n            <Image debug={debug} src=\"/logo-dwr.png\" style={logoStyle} />\n            <Image debug={debug} src=\"/logo-ucd-ccuh.png\" style={logoStyle} />\n            <Image debug={debug} src=\"/logo-ucanr.png\" style={logoStyle} />\n            <Image debug={debug} src={qrCodeUrl} style={logoStyle} />\n          </View>\n        </View>\n      </Page>\n    </Document>\n  );\n};\n\nBenchCardDocument.defaultProps = {\n  benchCardTemplate: undefined,\n};\n\nexport default BenchCardDocument;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport DownloadActionList from './DownloadActionList';\nimport JSZip from \"jszip\";\nimport { saveAs } from \"file-saver\";\nimport {  pdf } from \"@react-pdf/renderer\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport plantsAsExcelSheet from './plantsAsExcelSheet';\nimport {\n  faFileExcel,\n  faQrcode,\n  faIdCard,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport ReactExport from \"react-export-excel\";\nimport {\n  Button,\n  Modal,\n  Col,\n  Container,\n  Row,\n  ProgressBar,\n} from \"react-bootstrap\";\n\nimport {\n  BenchCardTemplate,\n  Data,\n  DownloadAction,\n  Plant,\n  SearchCriteria,\n} from \"../types\";\nimport { plantDetailQrCodeFromId } from \"../Plant/PlantDetailQrCode\";\nimport BenchCardDocument from \"../Plant/BenchCardDocument\";\n\ninterface DownloadMenuProps {\n\tdata: Data;\n\tsearchCriteria: SearchCriteria;\n\tplants: Plant[];\n}\n\nconst DownloadMenu = ({\n\tsearchCriteria,\n\tdata,\n\tplants\n}: DownloadMenuProps) => {\n\tconst [currentBct, setCurrentBct] = React.useState<BenchCardTemplate | null>(null);\n\tconst zipCancelled = React.useRef(false);\n\tconst [showZipModal, setShowZipModal] = React.useState(false);\n\tconst [zipCurrent, setZipCurrent] = React.useState(0);\n\tconst [zipTotal, setZipTotal] = React.useState(0);\n\n\tconst getDownloadActions = (\n\t\tdata: Data,\n\t\tsearchCriteria: SearchCriteria,\n\t\tplants: Plant[]\n\t): DownloadAction[] => {\n\t\tconst ExcelFile = ReactExport.ExcelFile;\n\t\tconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\n\t\tconst sideRender = (content: any) => {\n\t\t\tlet container = document.getElementById(\"download-outlet\");\n\t\t\tReactDOM.render(<></>, container, () => {\n\t\t\t\t/* IMPORTANT!  We clear the dom first, in order to force re-render.\n\t\t\t\t** Without this, the user can only download an excel document ONCE until they reload the page.  */\n\t\t\t\tReactDOM.render(content, container);\n\t\t\t});\n\t\t};\n\t\treturn [\n\t\t\t{\n\t\t\t\tinclude: !!searchCriteria.city,\n\t\t\t\tmethod: () => {\n\t\t\t\t\tPromise.all(\n\t\t\t\t\t\tplants.map((p: Plant) =>\n\t\t\t\t\t\t\tfetch(plantDetailQrCodeFromId(p.id).image_url)\n\t\t\t\t\t\t\t\t.then((r) => r.blob())\n\t\t\t\t\t\t\t\t.then((b) => [p, b] as [Plant, Blob])\n\t\t\t\t\t\t)\n\t\t\t\t\t).then((plantBlobPairs) => {\n\t\t\t\t\t\tvar zip = new JSZip();\n\t\t\t\t\t\tfor (let [p, blob] of plantBlobPairs) {\n\t\t\t\t\t\t\tzip.file(\n\t\t\t\t\t\t\t\tp.commonName + \".png\",\n\t\t\t\t\t\t\t\tblob as unknown as null,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tblob: true,\n\t\t\t\t\t\t\t\t} as unknown as JSZip.JSZipFileOptions & { dir: true }\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tzip.generateAsync({ type: \"blob\" }).then(function (content) {\n\t\t\t\t\t\t\tsaveAs(content, \"qr-codes.zip\");\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tlabel: (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<FontAwesomeIcon icon={faQrcode} className=\"mr-2\" />\n\t\t\t\t\t\tDownload QR codes\n\t\t\t\t\t</>\n\t\t\t\t),\n\t\t\t},\n\t\t\t...data.benchCardTemplates.map((bct) => ({\n\t\t\t\tinclude: !!searchCriteria.city,\n\t\t\t\tmethod: () => {\n\t\t\t\t\tif (!zipCancelled.current) {\n\t\t\t\t\t\tsetCurrentBct(bct);\n\t\t\t\t\t\tsetShowZipModal(true);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tlabel: (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<FontAwesomeIcon icon={faIdCard} className=\"mr-2\" />\n\t\t\t\t\t\tDownload Bench Cards ({bct.name})\n\t\t\t\t\t</>\n\t\t\t\t),\n\t\t\t})),\n\t\t\t{\n\t\t\t\tinclude: !!searchCriteria.city,\n\t\t\t\tmethod: () => {\n\t\t\t\t\tlet excelData = plantsAsExcelSheet(\n\t\t\t\t\t\tdata,\n\t\t\t\t\t\tplants,\n\t\t\t\t\t\t[searchCriteria.city.region]\n\t\t\t\t\t);\n\t\t\t\t\tsideRender(\n\t\t\t\t\t\t<ExcelFile\n\t\t\t\t\t\t\tfilename={`WUCOLS_${searchCriteria.city.name}`}\n\t\t\t\t\t\t\thideElement={true}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<ExcelSheet\n\t\t\t\t\t\t\t\tdataSet={excelData}\n\t\t\t\t\t\t\t\tname={`WUCOLS_${searchCriteria.city.name}`}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ExcelFile>\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t\tlabel: (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<FontAwesomeIcon icon={faFileExcel} className=\"mr-2\" />\n\t\t\t\t\t\tDownload in Excel format\n\t\t\t\t\t</>\n\t\t\t\t),\n\t\t\t},\n\t\t\t{\n\t\t\t\tinclude: !searchCriteria.city,\n\t\t\t\tmethod: () => {\n\t\t\t\t\tconsole.log('preparing Excel...');\n\t\t\t\t\tlet excelData = plantsAsExcelSheet(\n\t\t\t\t\t\tdata,\n\t\t\t\t\t\tdata.plants,\n\t\t\t\t\t\t[1,2,3,4,5,6]\n\t\t\t\t\t);\n\t\t\t\t\tconsole.log('rendering...');\n\t\t\t\t\tsideRender(\n\t\t\t\t\t\t<ExcelFile\n\t\t\t\t\t\t\tfilename={`WUCOLS_all_regions`}\n\t\t\t\t\t\t\thideElement={true}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<ExcelSheet\n\t\t\t\t\t\t\t\tdataSet={excelData}\n\t\t\t\t\t\t\t\tname={`WUCOLS_all_regions`}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ExcelFile>\n\t\t\t\t\t);\n\t\t\t\t\tconsole.log('rendered');\n\t\t\t\t},\n\t\t\t\tlabel: (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<FontAwesomeIcon icon={faFileExcel} className=\"mr-2\" />\n\t\t\t\t\t\tDownload WUCOLS plants for all regions\n\t\t\t\t\t</>\n\t\t\t\t),\n\t\t\t}\n\t\t].filter(da => da.include);\n\t};\n\n\tReact.useEffect(() => {\n\t\tif (showZipModal && currentBct && !zipCancelled.current) {\n\t\t\tsetZipTotal(plants.length);\n\t\t\tsetZipCurrent(0);\n\t\t\tconst cb = async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst plantBlobPairs = await Promise.all(\n\t\t\t\t\t\tplants.map(async (p: Plant) => {\n\t\t\t\t\t\t\tlet b: any;\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tif (zipCancelled.current) {\n\t\t\t\t\t\t\t\t\tthrow new Error(\"Download cancelled\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tb = await pdf(\n\t\t\t\t\t\t\t\t\t<BenchCardDocument\n\t\t\t\t\t\t\t\t\t\tbenchCardTemplate={currentBct}\n\t\t\t\t\t\t\t\t\t\tplant={p}\n\t\t\t\t\t\t\t\t\t\tregion={searchCriteria.city.region}\n\t\t\t\t\t\t\t\t\t\twaterUseByCode={data.waterUseByCode}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t).toBlob();\n\t\t\t\t\t\t\t\tlet current = 0;\n\t\t\t\t\t\t\t\tsetZipCurrent((i) => {\n\t\t\t\t\t\t\t\t\tcurrent = i === 0 ? 1 : i + 1;\n\t\t\t\t\t\t\t\t\treturn current;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\t`generated bench card ${current} of ${plants.length}`\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} catch (e: any) {\n\t\t\t\t\t\t\t\tif (e.message === \"Download cancelled\") {\n\t\t\t\t\t\t\t\t\tconsole.log(e.message);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn [p, b] as [Plant, Blob];\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t\tif (zipCancelled.current) {\n\t\t\t\t\t\tthrow new Error(\"Download cancelled\");\n\t\t\t\t\t}\n\t\t\t\t\tvar zip = new JSZip();\n\t\t\t\t\tfor (let [p, blob] of plantBlobPairs) {\n\t\t\t\t\t\tzip.file(\n\t\t\t\t\t\t\tp.commonName + \".pdf\",\n\t\t\t\t\t\t\tblob as unknown as null,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tblob: true,\n\t\t\t\t\t\t\t} as unknown as JSZip.JSZipFileOptions & { dir: true }\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tawait zip.generateAsync({ type: \"blob\" }).then(function (content) {\n\t\t\t\t\t\tsaveAs(content, `bench-cards-${currentBct.name}.zip`);\n\t\t\t\t\t});\n\t\t\t\t} catch (e: any) {\n\t\t\t\t\tif (e.message === \"Download cancelled\") {\n\t\t\t\t\t\tconsole.log(e.message);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tsetShowZipModal(false);\n\t\t\t\t\tsetZipCurrent(0);\n\t\t\t\t\tsetZipTotal(0);\n\t\t\t\t\tsetCurrentBct(null);\n\t\t\t\t\tzipCancelled.current = false;\n\t\t\t\t}\n\t\t\t};\n\t\t\tcb();\n\t\t}\n\t}, [showZipModal, setShowZipModal, currentBct]); // eslint-disable-line react-hooks/exhaustive-deps\n\n\tconst actionList = DownloadActionList({downloadActions: getDownloadActions(data, searchCriteria, plants)});\n\n\tconst modal = <Modal\n\t\tshow={showZipModal}\n\t\tonHide={() => {\n\t\t\tzipCancelled.current = true;\n\t\t\tsetShowZipModal(false);\n\t\t}}\n\t>\n\t\t<Modal.Header closeButton>\n\t\t\t<Modal.Title>Generating Zip file</Modal.Title>\n\t\t</Modal.Header>\n\t\t<Modal.Body>\n\t\t\t<Container fluid>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>Please wait. It can take a few seconds per bech card.</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<ProgressBar\n\t\t\t\t\t\t\tnow={Math.round((zipCurrent / zipTotal) * 100)}\n\t\t\t\t\t\t\tlabel={`${zipCurrent} of ${zipTotal}`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t</Modal.Body>\n\t\t<Modal.Footer>\n\t\t\t<Button\n\t\t\t\tvariant=\"primary\"\n\t\t\t\tonClick={() => {\n\t\t\t\t\tzipCancelled.current = true;\n\t\t\t\t\tsetShowZipModal(false);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tCancel\n\t\t\t</Button>\n\t\t</Modal.Footer>\n\t</Modal>;\n\treturn <>{modal}{actionList}</>;\n};\n\nexport default DownloadMenu;","import React from \"react\";\nimport ultimatePagination from \"ultimate-pagination\";\nimport { Pagination } from \"react-bootstrap\";\n\ninterface PlantPaginationProps {\n\tpageCount: number;\n\tpageSize: number;\n\tcurrentPageNumber: number; \n\tsetCurrentPageNumber: (pageNumber: number) => void;\n\tgetCurrentItems: (items:any[]) => any[];\n}\n \nconst clamp = (value:number, min:number, max:number) => {\n\tif(!value || value < min){\n\t\treturn min;\n\t}\n\tif(max < value){\n\t\treturn max;\n\t}\n\treturn value;\n}\n\nconst getPlantPaginationProps = (\n\tpageSize:number, \n\titemCount:number,\n\tmostRecentPageNumber:number, \n\tsetCurrentPageNumber: (pageNumber: number) => void\n): PlantPaginationProps => {\n\tconst pageCount = Math.max(1, Math.ceil(itemCount / pageSize));\n\tconst currentPageNumber = clamp(mostRecentPageNumber, 1, pageCount);\n\tconsole.log(mostRecentPageNumber, 1, pageCount, currentPageNumber);\n\tconst getCurrentItems = (items: any[]): any[] => \n\t\titems.slice(\n\t\t\t(currentPageNumber - 1) * pageSize,\n\t\t\t(currentPageNumber + 1) * pageSize\n\t\t);\n\treturn {currentPageNumber, setCurrentPageNumber, pageCount, pageSize, getCurrentItems};\n};\n\nconst PlantPagination = ({pageCount, currentPageNumber, setCurrentPageNumber}: PlantPaginationProps) => {\n\tif(pageCount <= 1){\n\t\treturn;\n\t}\n\tvar paginationModel = ultimatePagination.getPaginationModel({\n\t\t// Required\n\t\tcurrentPage: currentPageNumber,\n\t\ttotalPages: pageCount,\n\n\t\t// Optional\n\t\tboundaryPagesRange: 1,\n\t\tsiblingPagesRange: 1,\n\t\thideEllipsis: false,\n\t\thidePreviousAndNextPageLinks: false,\n\t\thideFirstAndLastPageLinks: false,\n\t});\n\n\treturn <Pagination>\n\t\t{paginationModel\n\t\t\t.map((p) => {\n\t\t\t\tconst props = {\n\t\t\t\t\tkey: p.key,\n\t\t\t\t\tactive: p.isActive,\n\t\t\t\t\tonClick: () => setCurrentPageNumber(p.value),\n\t\t\t\t};\n\t\t\t\tswitch (p.type) {\n\t\t\t\t\t//case 'PREVIOUS_PAGE_LINK': return <Pagination.Prev {...props}/>\n\t\t\t\t\t//case 'NEXT_PAGE_LINK'    : return <Pagination.Next {...props}/>\n\t\t\t\t\tcase \"PAGE\":\n\t\t\t\t\t\treturn <Pagination.Item {...props}>{p.value}</Pagination.Item>;\n\t\t\t\t\tcase \"ELLIPSIS\":\n\t\t\t\t\t\treturn <Pagination.Ellipsis {...props} />;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.filter((f) => !!f)}\n\t</Pagination>\n};\n\nexport {\n\tPlantPagination,\n\tgetPlantPaginationProps\n};","import React from \"react\";\nimport PlantList from \"../Plant/PlantList\";\nimport PlantTable from \"../Plant/PlantTable\";\nimport {\n  faTh,\n  faThLarge,\n  faBars,\n  IconDefinition,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport sortPlants from \"./sort-plants\";\nimport plantTypeCombinatorOptions from \"../Plant/plant-type-combinator-options\";\nimport SearchForm from \"./SearchForm\";\nimport Welcome from \"./Welcome\";\nimport { Data, Plant, SearchCriteria } from \"../types\";\nimport DownloadMenu from '../Download/DownloadMenu';\nimport {getPlantPaginationProps, PlantPagination} from '../Plant/PlantPagination';\n\nconst performancePlantLimit = 50000;\n\ninterface Props {\n  data: Data;\n  searchCriteria: SearchCriteria;\n  searchPerformed: boolean;\n  setSearchCriteria: (searchCriteria: SearchCriteria) => void;\n  isPlantFavorite: (plant: Plant) => boolean;\n  addAllToFavorites: (plants: Plant[]) => void;\n  togglePlantFavorite: (plant: Plant) => void;\n  queryString: string;\n  resetSearchCriteria: () => void;\n}\n\nexport interface PlantsViewMode {\n  id: string;\n  label: string;\n  component: React.ComponentType<any>;\n  icon: IconDefinition;\n}\n\nconst Search = ({\n  data,\n  searchCriteria,\n  searchPerformed,\n  setSearchCriteria,\n  isPlantFavorite,\n  togglePlantFavorite,\n  queryString,\n  resetSearchCriteria,\n  addAllToFavorites\n}: Props) => {\n  let plantsViewModes: PlantsViewMode[] = [\n    {\n      id: \"list\",\n      label: \"List\",\n      component: PlantTable,\n      icon: faBars,\n    },\n    {\n      id: \"grid\",\n      label: \"Grid\",\n      component: (props) =>\n        PlantList({ ...props, className: \"col-sm-12 col-lg-6 col-xl-6\" }),\n      icon: faThLarge,\n    },\n    {\n      id: \"dense-grid\",\n      label: \"Dense Grid\",\n      component: (props) =>\n        PlantList({ ...props, className: \"col-sm-12 col-lg-6 col-xl-4\" }),\n      icon: faTh,\n    },\n  ];\n  const [plantsViewModeId] = React.useState(plantsViewModes[0].id);\n  const plantsViewMode =\n    plantsViewModes.filter((vm) => vm.id === plantsViewModeId)[0] ||\n    plantsViewModes[0];\n\n  const matchingPlants = React.useMemo(() => {\n    let noType = Object.values(searchCriteria.plantTypes).every((b) => !b);\n    let noWu = Object.values(searchCriteria.waterUseClassifications).every(\n      (b) => !b\n    );\n    let types = Object.entries(searchCriteria.plantTypes)\n      .filter(([k, v]) => !!v)\n      .map(([k, v]) => k);\n    let typeFn =\n      searchCriteria.plantTypeCombinator ===\n      plantTypeCombinatorOptions.byId[\"ANY\"]\n        ? types.some.bind(types)\n        : types.every.bind(types);\n    //console.log(types);\n    if (!searchCriteria.city) {\n      return [];\n    }\n    return sortPlants(searchCriteria.city.region)(\n      data.plants.filter((p) => {\n        let typeOk = noType || typeFn((t) => p.types.indexOf(t) > -1);\n        if (!searchCriteria.city) {\n          return false;\n        }\n        let wu = p.waterUseByRegion[searchCriteria.city.region - 1];\n        let wuOk = searchCriteria.waterUseClassifications[wu] || noWu;\n        let nameOk =\n          !searchCriteria.name ||\n          p.searchName.indexOf(searchCriteria.name) > -1;\n        return wuOk && typeOk && nameOk;\n      })\n    ).slice(0, performancePlantLimit);\n  }, [data, searchCriteria]);\n\n  const plantPaginationProps = getPlantPaginationProps(\n    50,\n    matchingPlants.length,\n    searchCriteria.pageNumber, \n    (pn: number) => setSearchCriteria({ ...searchCriteria, pageNumber: pn }));\n\n  const actualPagination = PlantPagination({...plantPaginationProps});\n\n  return (\n    <div className=\"container-fluid\">\n      {/*\n    <div>\n      <pre>{JSON.stringify(match,null,2)}</pre>\n    </div>\n    */}\n      <div className=\"row\">\n        <nav className=\"col-sm-5 col-lg-4 col-xl-3 sidebar bg-light\">\n          <div className=\"sidebar-sticky p-3\">\n            <SearchForm\n              waterUseClassifications={data.waterUseClassifications}\n              plantTypes={data.plantTypes}\n              cityOptions={data.cityOptions}\n              searchCriteria={searchCriteria}\n              updateSearchCriteria={setSearchCriteria}\n            />\n            {!searchCriteria.city &&\n              <DownloadMenu {...{searchCriteria,data, plants:data.plants}} />\n            }\n          </div>\n        </nav>\n\n        <main className=\"col-sm-7 col-lg-8 col-xl-9 ml-sm-auto\" role=\"main\">\n          {!searchPerformed ? (\n            <Welcome />\n          ) : (\n            <>\n              <div className=\"d-flex justify-content-between align-items-center mb-3\">\n                <div>Matching Plants: {matchingPlants.length}</div>\n              </div>\n              <div className=\"clearfix\">\n                <button\n                  className=\"btn btn-sm btn-primary float-right\"\n                  onClick={() => addAllToFavorites(matchingPlants)}\n                >Add all matches to favorites</button>\n                {actualPagination}\n              </div>\n              {!searchCriteria.city ? (\n                <div>Please select a city</div>\n              ) : (\n                <plantsViewMode.component\n                  queryString={queryString}\n                  isPlantFavorite={isPlantFavorite}\n                  togglePlantFavorite={togglePlantFavorite}\n                  plants={plantPaginationProps.getCurrentItems(matchingPlants)}\n                  photosByPlantName={data.photos}\n                  plantTypeNameByCode={data.plantTypeNameByCode}\n                  region={searchCriteria.city.region}\n                  waterUseByCode={data.waterUseByCode}\n                />\n              )}\n              {actualPagination}\n            </>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default Search;\n","import React from \"react\";\nimport PlantTypeBadge from \"./PlantTypeBadge\";\nimport WaterDropRating from \"./WaterDropRating\";\nimport { SRLWrapper } from \"simple-react-lightbox\";\nimport PlantFavoriteButton from \"./PlantFavoriteButton\";\nimport { PlantDetailQrCode } from \"./PlantDetailQrCode\";\nimport { Link } from \"react-router-dom\";\nimport {\n  BenchCardTemplate,\n  Plant,\n  Region,\n  WaterUseClassification,\n} from \"../types\";\n\ninterface Props {\n  plant: Plant;\n  plantTypeNameByCode: { [key: string]: string };\n  waterUseByCode: { [key: string]: WaterUseClassification };\n  region: number;\n  regions: Region[];\n  benchCardTemplates: BenchCardTemplate[];\n  isPlantFavorite: (plant: Plant) => boolean;\n  togglePlantFavorite: (plant: Plant) => void;\n}\n\nconst PlantDetail = ({\n  plant,\n  plantTypeNameByCode,\n  waterUseByCode,\n  region,\n  regions,\n  benchCardTemplates,\n  isPlantFavorite,\n  togglePlantFavorite,\n}: Props) => {\n  if (!plant) {\n    return <div>Invalid Plant</div>;\n  }\n  //let wu = waterUseByCode[plant.waterUseByRegion[region-1]];\n  let regionWaterUsePairs: [Region, WaterUseClassification][] = regions.map(\n    (r) => [r, waterUseByCode[plant.waterUseByRegion[r.id - 1]]]\n  );\n\n  const imageSize = \"64px\";\n  let leadPhoto = plant.photos[0];\n  let photoUrl = !leadPhoto ? \"\" : leadPhoto.small.url;\n\n  const webBenchCard = (\n    <>\n      <div className=\"float-right h2\">\n        <PlantFavoriteButton\n          {...{ plant, togglePlantFavorite, isPlantFavorite }}\n        />\n      </div>\n      <div className=\"d-flex flex-row bd-highlight align-items-center mb-4 \">\n        {photoUrl && (\n          <img\n            className=\"mr-3\"\n            src={photoUrl}\n            style={{ objectFit: \"cover\", width: imageSize, height: imageSize }}\n            alt={plant.botanicalName}\n          />\n        )}\n        <h1 className=\"m0\">\n          <em>{plant.botanicalName}</em>\n        </h1>\n      </div>\n\n      <table className=\"table table-bordered\">\n        <tbody>\n          <tr>\n            <th style={{ width: \"25%\" }}>Botanical Name</th>\n            <td>\n              <em>{plant.botanicalName}</em>\n            </td>\n          </tr>\n          <tr>\n            <th>Common Name</th>\n            <td>{plant.commonName}</td>\n          </tr>\n          <tr>\n            <th>Plant Type(s)</th>\n            <td>\n              {plant.types.map((t) => (\n                <PlantTypeBadge\n                  type={t}\n                  plantTypeNameByCode={plantTypeNameByCode}\n                  key={t}\n                />\n              ))}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n\n      <div className=\"my-5\">\n        <h4 className=\"mb-4\">Water Usage by Region</h4>\n        <table className=\"table table-bordered table-sm\">\n          <tbody>\n            {regionWaterUsePairs.map(([r, wu]) => (\n              <tr className={r.id === region ? \"table-primary\" : \"\"} key={r.id}>\n                <td>\n                  Region {r.id}: {r.name}\n                </td>\n                <td style={{ whiteSpace: \"nowrap\" }}>\n                  <WaterDropRating waterUseCode={wu.code} />\n                </td>\n                <td style={{ whiteSpace: \"nowrap\" }}>{wu.name}</td>\n                <td style={{ whiteSpace: \"nowrap\" }}>\n                  {wu.percentageET0 === \"N/A\" ? (\n                    \"N/A\"\n                  ) : (\n                    <>\n                      {wu.percentageET0}% ET<sub>0</sub>\n                    </>\n                  )}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      {!!plant.culturalInformation && (\n        <div>\n          <h4 className=\"mb-4\">Cultural Information</h4>\n          <div\n            dangerouslySetInnerHTML={{ __html: plant.culturalInformation }}\n          />\n        </div>\n      )}\n\n      <div className=\"row mt-4\">\n        {!!plant.photos.length && (\n          <div className=\"col-sm-12\">\n            <h4 className=\"mb-4\">Photos ({plant.photos.length})</h4>\n            <SRLWrapper key=\"plant gallery\">\n              <div className=\"row row-cols-1 row-cols-md-3 g-4\">\n                {plant.photos.map((p, i) => (\n                  <div className=\"col\" key={i}>\n                    <div className=\"card mb-3\" key={i}>\n                      <a href={p.small.url}>\n                        <img\n                          src={p.small.url}\n                          className=\"card-img-top\"\n                          alt={p.caption}\n                          style={{\n                            height: \"10em\",\n                            objectFit: \"cover\",\n                          }}\n                        />\n                      </a>\n                      <div className=\"card-body text-center\">\n                        <p className=\"card-text\">{p.caption}</p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </SRLWrapper>\n          </div>\n        )}\n      </div>\n    </>\n  );\n\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-md-8 col-xl-9 ml-sm-auto pt-3 pb-5 px-5\">\n          {webBenchCard}\n        </div>\n        <nav className=\"col-md-4 col-xl-3\">\n          <div className=\"p-3\">\n            <div className=\"d-flex flex-column\">\n              {benchCardTemplates.map((bct) => (\n                <div className=\"card mb-3 text-center\" key={bct.id}>\n                  <div className=\"card-body d-flex flex-column justify-content-between\">\n                    <h4>{bct.name} Bench Card</h4>\n                    <Link\n                      key={bct.id}\n                      to={`/plant/${plant.id}/benchcard/${bct.id}`}\n                      className=\"mt-3 btn btn-primary\"\n                      target=\"_blank\"\n                    >\n                      Download\n                    </Link>\n                  </div>\n                </div>\n              ))}\n              <div className=\"card mr-3 text-center\">\n                <div className=\"card-body\">\n                  <h4>QR Code</h4>\n                  <PlantDetailQrCode\n                    plant={plant}\n                    style={{ width: \"auto\", maxWidth: \"150px\" }}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </nav>\n      </div>\n    </>\n  );\n};\n\nexport default PlantDetail;\n","import React from \"react\";\nimport PlantTable from \"../Plant/PlantTable\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faQrcode,\n  faFileExcel,\n  faIdCard,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { Data, Plant, SearchCriteria } from \"../types\";\nimport DownloadMenu from '../Download/DownloadMenu';\nimport { getPlantPaginationProps, PlantPagination } from \"../Plant/PlantPagination\";\n\ninterface Props {\n  queryString: string;\n  favoritePlants: Plant[];\n  data: Data;\n  isPlantFavorite: (plant: Plant) => boolean;\n  togglePlantFavorite: (plant: Plant) => void;\n  clearAllFavorites: () => void;\n  searchCriteria: SearchCriteria;\n}\n\nconst Favorites = ({\n  queryString,\n  favoritePlants,\n  data,\n  isPlantFavorite,\n  togglePlantFavorite,\n  clearAllFavorites,\n  searchCriteria,\n}: Props) => {\n  const [currentPageNumber, setCurrentPageNumber] = React.useState(0);\n  const plantPaginationProps = getPlantPaginationProps(\n    50,\n    favoritePlants.length,\n    currentPageNumber, \n    setCurrentPageNumber);\n\n  const actualPagination = PlantPagination({...plantPaginationProps});\n  return (\n    <>\n      <div className=\"container-fluid\">\n        {!favoritePlants.length ? (\n          <div className=\"py-5\">\n            <div className=\"text-center mb-5\">\n              <div className=\"h3\">You do not have any favorite species yet</div>\n              <p>\n                After you have added some favorites, you can download them in\n                various formats.\n              </p>\n            </div>\n            <div className=\"d-flex justify-content-around\">\n              {[\n                {\n                  icon: faFileExcel,\n                  label: \"Spreadsheet\",\n                },\n                {\n                  icon: faQrcode,\n                  label: \"QR Codes\",\n                },\n                {\n                  icon: faIdCard,\n                  label: \"Bench Cards\",\n                },\n              ].map((f, i) => (\n                <div className=\"\" key={i}>\n                  <div className=\"card\">\n                    <div className=\"card-body text-center\">\n                      <FontAwesomeIcon icon={f.icon} className=\"mt-2 h1\" />\n                      <div className=\"h5\">{f.label}</div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        ) : (\n          <div className=\"row\">\n            <nav className=\"col-sm-4 col-lg-3 col-xl-2 sidebar bg-light\">\n              <div className=\"sidebar-sticky p-3\">\n                {!!favoritePlants.length && \n                  <DownloadMenu {...{searchCriteria,data, plants:favoritePlants}} />\n                }\n              </div>\n            </nav>\n            <div className=\"col-sm-8 col-lg-9 col-xl-10 ml-sm-auto\">\n              <div className=\"my-3\">\n                {favoritePlants.length === 0 ? (\n                  \"You don't have any favorites yet.\"\n                ) : (\n                  <div className=\"clearfix\">\n                    You have <strong>{favoritePlants.length}</strong>\n                    {' '}favorite{favoritePlants.length > 1 ? 's' : ''} so far.\n                    <button className=\"btn btn-sm btn-danger float-right\" onClick={clearAllFavorites}>Clear All Favorites</button>\n                  </div>\n                )}\n              </div>\n              {!searchCriteria.city ? (\n                <div>Select a city to view your favorites</div>\n              ) : (\n                <>\n                {actualPagination}\n                <PlantTable\n                  queryString={queryString}\n                  showAvailableMedia={true}\n                  isPlantFavorite={isPlantFavorite}\n                  togglePlantFavorite={togglePlantFavorite}\n                  plants={plantPaginationProps.getCurrentItems(favoritePlants)}\n                  photosByPlantName={data.photos}\n                  plantTypeNameByCode={data.plantTypeNameByCode}\n                  region={searchCriteria.city.region}\n                  waterUseByCode={data.waterUseByCode}\n                />\n                {actualPagination}\n                </>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Favorites;\n","import plantTypeCombinatorOptions from \"../Plant/plant-type-combinator-options\";\nimport { City, PlantType, SearchCriteria } from \"../types\";\n\ntype BoolDict = { [key: string]: boolean };\nconst autoSearch = false;\n\nconst fromQuerystring = (qs: string) => {\n  let ps = new URLSearchParams(qs);\n  return {\n    pageNumber: parseInt(ps.get(\"p\") || \"\") || 1,\n    plantTypes: ps.getAll(\"t\").reduce((dict: BoolDict, pt) => {\n      dict[pt] = true;\n      return dict;\n    }, {}),\n    name: (ps.get(\"n\") || \"\").toLowerCase(),\n    plantTypeCombinatorId: ps.get(\"tm\") || \"\",\n    cityId: parseInt(ps.get(\"c\") || \"0\"),\n    waterUseClassifications: ps.getAll(\"wu\").reduce((dict: BoolDict, wu) => {\n      dict[wu] = true;\n      return dict;\n    }, {}),\n  };\n};\n\nconst toQuerystring = (sc: SearchCriteria) => {\n  let wu = Object.entries(sc.waterUseClassifications)\n    .filter(([, selected]) => selected)\n    .map(([code]) => code);\n  let pt = Object.entries(sc.plantTypes)\n    .filter(([, selected]) => selected)\n    .map(([code]) => code);\n  let ps = new URLSearchParams([\n    ...(!sc.city ? [] : [[\"c\", sc.city.id.toString()]]),\n    //exclude default param values for terser URLs\n    ...(!sc.name ? [] : [[\"n\", sc.name]]),\n    ...(sc.plantTypeCombinator === plantTypeCombinatorOptions.default\n      ? []\n      : [[\"tm\", sc.plantTypeCombinator.value]]),\n    ...wu.map((wu) => [\"wu\", wu]),\n    ...pt.map((pt) => [\"t\", pt]),\n    ...(sc.pageNumber === 1 ? [] : [[\"p\", sc.pageNumber.toString()]]),\n  ]);\n  return ps.toString();\n};\n\nconst getDefaultSearchCriteria = (plantTypes: PlantType[]) =>\n  ({\n    city: null as unknown as City,\n    name: \"\",\n    waterUseClassifications: {},\n    plantTypes: plantTypes.reduce((dict: BoolDict, pt) => {\n      dict[pt.code] = autoSearch ? pt.code === \"A\" : false;\n      return dict;\n    }, {}),\n    pageNumber: 1,\n    plantTypeCombinator: plantTypeCombinatorOptions.default,\n  } as SearchCriteria);\n\nconst initSearchCriteria = (\n  querystring: string,\n  cityOptions: City[],\n  plantTypes: PlantType[]\n) => {\n  let up = SearchCriteriaConverter.fromQuerystring(querystring);\n  //console.log(up);\n  let sc = getDefaultSearchCriteria(plantTypes);\n  sc.waterUseClassifications = up.waterUseClassifications;\n  sc.plantTypes = up.plantTypes;\n  sc.name = up.name;\n  sc.pageNumber = up.pageNumber;\n  sc.city = cityOptions.filter((o) => o.id === up.cityId)[0] || sc.city;\n  if (up.plantTypeCombinatorId in plantTypeCombinatorOptions.byId) {\n    sc.plantTypeCombinator =\n      plantTypeCombinatorOptions.byId[up.plantTypeCombinatorId];\n  }\n  return sc;\n};\n\nconst SearchCriteriaConverter = {\n  fromQuerystring: fromQuerystring,\n  toQuerystring: toQuerystring,\n  getDefaultSearchCriteria: getDefaultSearchCriteria,\n  initSearchCriteria: initSearchCriteria,\n};\n\nexport default SearchCriteriaConverter;\n","import React from \"react\";\nimport \"./App.css\";\nimport Map from \"./Search/Map\";\n//import {useGeolocation} from '../src/useGeolocation';\nimport useLocalStorage from \"./Utilities/useLocalStorage\";\nimport sortPlants from \"./Search/sort-plants\";\nimport Search from \"./Search/Search\";\nimport PlantDetail from \"./Plant/PlantDetail\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faSearch,\n  faStar,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { PDFViewer } from \"@react-pdf/renderer\";\n\nimport Favorites from \"./Favorites/Favorites\";\n\nimport {\n  //BrowserRouter as Router,\n  useLocation,\n  useHistory,\n  Route,\n  NavLink,\n  Redirect,\n} from \"react-router-dom\";\n\nimport SimpleReactLightbox from \"simple-react-lightbox\";\nimport { useToasts } from \"react-toast-notifications\";\nimport SearchCriteriaConverter from \"./Search/search-criteria-converter\";\nimport BenchCardDocument from \"./Plant/BenchCardDocument\";\n\nimport {\n  BoolDict,\n  City,\n  Data,\n  Plant,\n  SearchCriteria,\n} from \"./types\";\n\ninterface Props {\n  data: Data;\n}\n\nfunction App({ data }: Props) {\n  //const {lat,lng,error} = useGeolocation(false,{enableHighAccuracy: true});\n  const location = useLocation();\n  const history = useHistory();\n  const searchCriteria = SearchCriteriaConverter.initSearchCriteria(\n    location.search,\n    data.cityOptions,\n    data.plantTypes\n  );\n\n  const searchWasPerformed = (sc: SearchCriteria) =>\n    Object.values(sc.waterUseClassifications).some((b) => b) ||\n    Object.values(sc.plantTypes).some((b) => b) ||\n    sc.name.length > 0;\n\n  const resetSearchCriteria = () =>\n    updateSearchCriteria(\n      SearchCriteriaConverter.getDefaultSearchCriteria(data.plantTypes)\n    );\n\n  const updateSearchCriteria = React.useCallback(\n    (sc: SearchCriteria) => {\n      let qs = SearchCriteriaConverter.toQuerystring(sc);\n      //console.log('search altered',qs);\n      if (!history) {\n        //console.log('no history')\n        //return;\n      }\n      //console.log(history)\n      history.push({\n        pathname: \"/search\",\n        search: qs,\n      });\n      //console.log(sc);\n    },\n    [history]\n  );\n\n  const [isFavoriteByPlantId, updateIsFavoriteByPlantId] =\n    useLocalStorage<BoolDict>(\"isFavoriteByPlantId\", {});\n  const favoritePlants = sortPlants(\n    !searchCriteria.city ? 0 : searchCriteria.city.region\n  )(data.plants.filter((p) => !!isFavoriteByPlantId[p.id]));\n  const isPlantFavorite = (p: Plant) => !!isFavoriteByPlantId[p.id];\n\n  const { addToast, removeToast } = useToasts();\n\n  const addAllToFavorites = (plants: Plant[]) => {\n    let original = Object.assign({},isFavoriteByPlantId);\n    let amended = Object.assign(Object.assign({}, original), Object.fromEntries(plants.map(p => [p.id, true])));\n    console.log(amended);\n    updateIsFavoriteByPlantId(amended);\n\n    let thisToastId = \"\";\n    addToast(\n      <div>\n        Added {plants.length} favorites\n        <button\n          className=\"btn btn-link\"\n          onClick={() => {\n            updateIsFavoriteByPlantId(original);\n            removeToast(thisToastId);\n          }}\n        >\n          UNDO\n        </button>\n      </div>,\n      {\n        appearance: \"info\",\n        transitionState: \"entered\",\n        autoDismiss: true,\n      },\n      (toastId) => {\n        thisToastId = toastId;\n      }\n    );\n  };\n\n  const clearAllFavorites = () => {\n    let clearedDict = Object.fromEntries(favoritePlants.map(p => [p.id, false]));\n    let unclearedDict = Object.fromEntries(favoritePlants.map(p => [p.id, true]));\n    updateIsFavoriteByPlantId(clearedDict);\n\n    let thisToastId = \"\";\n    addToast(\n      <div>\n        Cleared favorites\n        <button\n          className=\"btn btn-link\"\n          onClick={() => {\n            updateIsFavoriteByPlantId(unclearedDict);\n            removeToast(thisToastId);\n          }}\n        >\n          UNDO\n        </button>\n      </div>,\n      {\n        appearance: \"info\",\n        transitionState: \"entered\",\n        autoDismiss: true,\n      },\n      (toastId) => {\n        thisToastId = toastId;\n      }\n    );\n  };\n\n  function togglePlantFavorite(p: Plant) {\n    let isFavoriteNow = !isFavoriteByPlantId[p.id];\n    updateIsFavoriteByPlantId({\n      ...isFavoriteByPlantId,\n      [p.id]: isFavoriteNow,\n    });\n    let thisToastId = \"\";\n    addToast(\n      <div>\n        Plant {isFavoriteNow ? \"added to\" : \"removed from\"} favorites\n        <button\n          className=\"btn btn-link\"\n          onClick={() => {\n            updateIsFavoriteByPlantId({\n              ...isFavoriteByPlantId,\n              [p.id]: !isFavoriteNow,\n            });\n            removeToast(thisToastId);\n            //togglePlantFavorite(p);\n          }}\n        >\n          UNDO\n        </button>\n      </div>,\n      {\n        appearance: \"info\",\n        transitionState: \"entered\",\n        autoDismiss: true,\n      },\n      (toastId) => {\n        thisToastId = toastId;\n      }\n    );\n  }\n\n  return (\n    <>\n      <div className=\"App\">\n        <nav className=\"navbar navbar-dark bg-dark sticky-top d-flex justify-content-between\">\n          <div className=\"btn-group\">\n            {[\n              {\n                label: \"Search\",\n                icon: faSearch,\n                to: \"/search\" + location.search,\n              },\n              {\n                label: `Favorites (${favoritePlants.length})`,\n                icon: faStar,\n                to: \"/favorites\" + location.search,\n                tooltip: \"Download options available\",\n              },\n            ].map((vm, i) => {\n              return (\n                <NavLink\n                  key={i}\n                  activeClassName=\"active\"\n                  className=\"btn btn-outline-light\"\n                  to={vm.to}\n                >\n                  <FontAwesomeIcon icon={vm.icon} />\n                  <span className=\"ml-2\" title={vm.tooltip}>\n                    {vm.label}\n                  </span>\n                </NavLink>\n              );\n            })}\n          </div>\n\n          {!!searchCriteria.city && (\n            <button\n              className=\"btn btn-outline-light\"\n              onClick={() => resetSearchCriteria()}\n            >\n              Clear Search Form (Start over)\n            </button>\n          )}\n\n          {/*\n        <div>\n          <span className=\"mr-3 text-light\">\n            View plants in a\n          </span>\n          <div className=\"btn-group\">\n            {plantsViewModes.map(vm => \n              <button className={'btn btn-outline-light' + (vm.id === plantsViewModeId ? ' active' : '')} onClick={() => {\n                setPlantsViewModeId(vm.id);\n              }}>\n                <FontAwesomeIcon icon={vm.icon} />\n                <span className=\"ml-2\">\n                  {vm.label}\n                </span>\n              </button>\n            )}\n          </div>\n        </div>\n        */}\n        </nav>\n        <Route exact={true} path=\"/\">\n          <Redirect to=\"/search\" />\n        </Route>\n        <Route\n          path=\"/map\"\n          render={({ match }) => {\n            return (\n              <div>\n                <Map\n                  cities={data.cities}\n                  onSelect={(city: City) => {\n                    alert(city.name);\n                  }}\n                />\n              </div>\n            );\n          }}\n        />\n        <Route\n          path=\"/plant/:plantId\"\n          exact={true}\n          render={({ match }) => {\n            const id = parseInt(match.params.plantId);\n            let plant = data.plants.filter(\n              (p) => p.id === id || p.url_keyword === match.params.plantId\n            )[0];\n            return !plant ? (\n              <div className=\"container-fluid my-5\">\n                No plant found by that ID\n              </div>\n            ) : (\n              <div className=\"container-fluid\">\n                <SimpleReactLightbox>\n                  <PlantDetail\n                    {...{\n                      plant,\n                      photos: data.photos[plant.botanicalName] || [],\n                      benchCardTemplates: data.benchCardTemplates,\n                      plantTypeNameByCode: data.plantTypeNameByCode,\n                      waterUseByCode: data.waterUseByCode,\n                      waterUseClassifications: data.waterUseClassifications,\n                      region: !!searchCriteria.city\n                        ? searchCriteria.city.region\n                        : 0,\n                      togglePlantFavorite,\n                      isPlantFavorite,\n                      regions: data.regions,\n                    }}\n                  />\n                </SimpleReactLightbox>\n              </div>\n            );\n          }}\n        />\n        <Route\n          path=\"/plant/:plantId/benchcard/:bctId\"\n          render={({ match }) => {\n            const id = parseInt(match.params.plantId);\n            const bctId = match.params.bctId;\n            const bct = data.benchCardTemplates.filter(\n              (bct) => bct.id === bctId\n            )[0];\n            let plant = data.plants.filter(\n              (p) => p.id === id || p.url_keyword === match.params.plantId\n            )[0];\n            return !plant ? (\n              <div className=\"container-fluid my-5\">\n                No plant found by that ID\n              </div>\n            ) : !bct ? (\n              <div className=\"container-fluid my-5\">\n                No Bench Card found by that ID\n              </div>\n            ) : (\n              <>\n                {/*\n            <pre>{JSON.stringify(plant,null,2)}</pre>\n            */}\n                <PDFViewer\n                  style={{ width: \"100vw\", height: \"90vh\" }}\n                  showToolbar={false}\n                >\n                  <BenchCardDocument\n                    benchCardTemplate={bct}\n                    plant={plant}\n                    region={\n                      (searchCriteria.city && searchCriteria.city.region) || 1\n                    }\n                    waterUseByCode={data.waterUseByCode}\n                  />\n                </PDFViewer>\n              </>\n            );\n          }}\n        />\n        <Route exact={true} path=\"/favorites\">\n          <Favorites\n            {...{\n              favoritePlants,\n              queryString: location.search,\n              isPlantFavorite,\n              togglePlantFavorite,\n              searchCriteria,\n              clearAllFavorites,\n              data,\n            }}\n          />\n        </Route>\n        {/*\n      <Route exact=\"true\" path=\"/search/(types)?/:types?\" render={match => \n      */}\n        <Route\n          exact={true}\n          path=\"/search\"\n          render={(match) => (\n            <Search\n              queryString={location.search}\n              searchCriteria={searchCriteria}\n              isPlantFavorite={isPlantFavorite}\n              togglePlantFavorite={togglePlantFavorite}\n              setSearchCriteria={updateSearchCriteria}\n              searchPerformed={searchWasPerformed(searchCriteria)}\n              resetSearchCriteria={resetSearchCriteria}\n              addAllToFavorites={addAllToFavorites}\n              data={data}\n            />\n          )}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ninterface SWConfig {\n  onUpdate: (registration: ServiceWorkerRegistration) => void;\n  onSuccess: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config: SWConfig) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string | URL, config: SWConfig) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: SWConfig) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./Utilities/serviceWorker\";\nimport { ToastProvider } from \"react-toast-notifications\";\nimport {\n  //BrowserRouter as Router,\n  HashRouter as Router,\n} from \"react-router-dom\";\nimport { Data, WaterUseClassification, WucolsBlobLink } from \"./types\";\n\nimport \"./sass/wucols.scss\";\n\ndeclare global {\n  interface Window {\n    wucols_data: Data;\n  }\n}\nfetch(\n  \"https://wucols.blob.core.windows.net/wucols-export/meta/wucols-data.json\"\n)\n  .then((r) => r.json())\n  .then((l: WucolsBlobLink) => fetch(l.cachedBlobUrl))\n  .then((r) => r.json())\n  .then((d: Data) => {\n    window.wucols_data = d;\n    d.plants.forEach((p) => {\n      p.searchName = (p.commonName + \" \" + p.botanicalName).toLowerCase();\n    });\n\n    d.plantTypeNameByCode = d.plantTypes.reduce(\n      (dict: { [key: string]: string }, t) => {\n        dict[t.code] = t.name;\n        return dict;\n      },\n      {}\n    );\n\n    d.waterUseByCode = d.waterUseClassifications.reduce(\n      (dict: { [key: string]: WaterUseClassification }, wu) => {\n        dict[wu.code] = wu;\n        return dict;\n      },\n      {}\n    );\n\n    d.cityOptions = d.cities\n      .map((c) => ({\n        id: c.id,\n        position: c.position,\n        key: c.id,\n        name: c.name,\n        label: \"Region \" + c.region + \": \" + c.name,\n        value: c.name,\n        region: c.region,\n      }))\n      .sort((a, b) => (a.label > b.label ? 1 : a.label < b.label ? -1 : 0));\n\n    d.plantTypes = d.plantTypes.sort((a, b) =>\n      a.name < b.name ? -1 : a.name > b.name ? 1 : 0\n    );\n\n    d.benchCardTemplates = d.benchCardTemplates.sort((a, b) =>\n      a.name < b.name ? -1 : a.name > b.name ? 1 : 0\n    );\n\n    ReactDOM.render(\n      <ToastProvider\n        autoDismiss\n        placement=\"bottom-center\"\n        autoDismissTimeout={6000}\n      >\n        <Router /*basename={process.env.PUBLIC_URL}*/>\n          <App data={d} />\n        </Router>\n      </ToastProvider>,\n      document.getElementById(\"root\")\n    );\n  });\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}